@startuml

hide circle
skinparam classAttributeIconSize 0

class "{abstract}\n<i>Command" {
    +<i>execute(ModuleList:moduleList, Ui:ui, Storage:storage)
}

class "AddCommand" {
    #moduleCode:String
    #moduleName:String
    #moduleType:String
    #moduleCredits:Double
    #preRequisites:ArrayList<String>
    #untakenPreRequisites:ArrayList<String>
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
    -createModuleByType():Module
}

class "CapCommand" {
    #cap:Float
    #degreeClassification:String
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
    -checkSu(Module:module):Boolean
    -convertGradeToCap(String:grade):Float
    -calculateCap(Double:totalCredit, Float:totalModuleCap):Float
    -getDegreeClassification(Float:cap):String
}

class "DeleteCommand" {
    #moduleCode:String
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
}

class "DoneCommand" {
    #moduleCode:String
    #moduleGrade:String
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
    -markDone(ModuleList:moduleList, Module:module)
}

class "ExitCommand" {
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
}

class "ListCommand" {
    -scope:String
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
}

class "ProgressCommand" {
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
}

class "UpdateCommand" {
    -moduleCode:String
    -commandFlags:ArrayList<String>
    -targetModule:Module
    -moduleCredit:Double
    -moduleGrade:String
    -preRequisites:ArrayList<String>
    +execute(ModuleList:moduleList, Ui:ui, Storage:storage)
    -updateModuleName(ArrayList<String>:commandFlags)
    -updateModuleCredits(ArrayList<String>:commandFlags)
    -updateModuleGrade(ArrayList<String>:commandFlags)
    -updatePrerequisites(ArrayList<String>:commandFlags, ModuleList:modules)
    -extractPrerequisitesNotTaken(ModuleList:modules, ArrayList<String>:prerequisites):ArrayList<String>
    -checkSelfPrerequisite(Module:module, ArrayList<String>:preRequisites)
    -removeModuleFromRequiredBy(Module:targetModule, ModuleList:moduleList)
    -addModuleToRequiredBy(Module targetModule, ModuleList moduleList, ArrayList<String> newPrerequisites)
}

"{abstract}\n<i>Command" <|-- "AddCommand"
"{abstract}\n<i>Command" <|-- "CapCommand"
"{abstract}\n<i>Command" <|-- "DeleteCommand"
"{abstract}\n<i>Command" <|-- "DoneCommand"
"{abstract}\n<i>Command" <|-- "ExitCommand"
"{abstract}\n<i>Command" <|-- "ListCommand"
"{abstract}\n<i>Command" <|-- "ProgressCommand"
"{abstract}\n<i>Command" <|-- "UpdateCommand"
@enduml